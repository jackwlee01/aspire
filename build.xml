<?xml version="1.0" standalone="yes"?>
<project name="aspirin" default="aslib" basedir="." xmlns:artifact="urn:maven-artifact-ant">
  <property name="deploy.dir"   value="dist"/>
  <property name="libs.dir"     value="lib"/>

  <!-- our dependencies are in a separate file so that we can integrate into OOO builds -->
  <import file="etc/libs-incl.xml"/>

  <!-- we read our flexsdk.dir from build.properties when building standalone -->
  <property file="etc/build.properties"/>
  <echo message="flexsdk.dir = ${flexsdk.dir}"/>

  <target name="prepare">
    <fail><condition><not><isset property="flexsdk.dir"/></not></condition>
      You must pass -Dflexsdk.dir=/path/to/flexsdk when building. It must be an
      absolute path.
    </fail>
    <mkdir dir="${deploy.dir}"/>
  </target>

  <target name="clean" description="Removes build results">
    <delete dir="${deploy.dir}/classes"/>
    <delete failonerror="false"><fileset dir="${deploy.dir}" includes="*.swc"/></delete>
  </target>

  <target name="distclean" description="Removes all generated files and directories">
    <delete dir="${deploy.dir}"/>
  </target>

  <target name="aslib" depends="prepare" description="Builds the library (.swc file)">
    <!-- generate aslib-config.xml for compilation -->
    <copy file="etc/aslib-config.xml.in" tofile="${deploy.dir}/aslib-config.xml">
      <filterset>
        <filter token="flex_sdk_dir" value="${flexsdk.dir}"/>
      </filterset>
    </copy>
    <!-- actually build our library -->
    <java jar="${flexsdk.dir}/lib/compc.jar" fork="true" failonerror="true">
      <arg value="-load-config"/>
      <arg value="${deploy.dir}/aslib-config.xml"/>
      <arg value="-compiler.optimize"/>
      <arg value="-compiler.source-path=src/as/"/>
      <arg value="-include-sources=src/as/"/>
      <arg line="-library-path lib"/>
      <arg value="-output"/>
      <arg value="${deploy.dir}/${ant.project.name}.swc"/>
    </java>
    <delete file="${deploy.dir}/aslib-config.xml"/>
  </target>

  <target name="asdoc" depends="prepare" description="Builds the documentation">
    <mkdir dir="${deploy.dir}/asdocs"/>
    <java classpath="${flexsdk.dir}/lib/asdoc.jar" classname="flex2.tools.ASDoc" fork="true">
      <jvmarg value="-Xmx1024m"/>
      <jvmarg value="-Dsun.io.useCanonCaches=false"/>
      <jvmarg value="-Xbootclasspath/p:${flexsdk.dir}/asdoc/lib/xalan.jar"/>
      <arg value="+flexlib=${flexsdk.dir}/frameworks"/>
      <arg line="-library-path ${flexsdk.dir}/frameworks/libs"/>
      <arg line="-library-path lib"/>
      <arg line="-templates-path ${flexsdk.dir}/asdoc/templates"/>
      <arg line="-doc-sources src"/>
      <arg line="-load-config+=etc/asdoc-config.xml"/>
      <arg line="-output ${deploy.dir}/asdocs"/>
    </java>
  </target>

  <target name="dist" depends="prepare,aslib" description="Builds the distribution files">
    <!-- everything happens in our "depends" -->
  </target>

  <property name="maven-ant.vers" value="2.1.1"/>
  <property name="maven-ant.dir" value="${user.home}/.m2/ant-support"/>
  <property name="maven-ant.jar" value="${maven-ant.dir}/maven-ant-tasks-${maven-ant.vers}.jar"/>
  <property name="maven-ant.url"
            value="http://mirrors.ibiblio.org/pub/mirrors/apache/maven/binaries"/>
  <condition property="maven-ant.exists"><available file="${maven-ant.jar}"/></condition>
  <target name="-download-maven-ant" unless="maven-ant.exists">
    <mkdir dir="${maven-ant.dir}"/>
    <get src="${maven-ant.url}/maven-ant-tasks-${maven-ant.vers}.jar"
         dest="${maven-ant.jar}" usetimestamp="true"/>
  </target>

  <property name="maven.deploy.repo" value="file://${user.home}/.m2/repository"/>
  <target name="maven-deploy" depends="-download-maven-ant"
          description="Deploys build artifacts to a Maven repository.">
    <taskdef resource="org/apache/maven/artifact/ant/antlib.xml"
             uri="urn:maven-artifact-ant" classpath="${maven-ant.jar}"/>
         <!--    <artifact:pom id="pom" file="pom.xml"/>
    <artifact:deploy file="${deploy.dir}/${ant.project.name}.swc" uniqueVersion="false">
      <remoteRepository url="${maven.deploy.repo}"/>
      <pom refid="pom"/>
      </artifact:deploy>-->
    <artifact:deploy file="bin/import_action.py" uniqueVersion="false">
      <remoteRepository url="${maven.deploy.repo}"/>
      <pom file="etc/py-pom.xml"/>
    </artifact:deploy>
  </target>
</project>
